{"version":3,"file":"Fill-72GruJbb.js","sources":["../../src/assets/Thumbnails/fill/sierpinski-triangle.svg","../../src/assets/Thumbnails/fill/sierpinski-pentagon.svg","../../src/assets/Thumbnails/fill/sierpinski-hexagon.svg","../../src/assets/Thumbnails/fill/pentaflake.svg","../../src/assets/Thumbnails/fill/hexaflake.svg","../../src/assets/Thumbnails/fill/hexnut.svg","../../src/assets/Thumbnails/fill/hexpool.svg","../../src/assets/Thumbnails/fill/sierpinski-carpet.svg","../../src/assets/Thumbnails/fill/t-square.svg","../../src/lib/rules/Fill.ts"],"sourcesContent":["export default \"__VITE_ASSET__xddMAoxy__\"","export default \"__VITE_ASSET__R4iREAbN__\"","export default \"__VITE_ASSET__RR8wz1Yt__\"","export default \"__VITE_ASSET__4NFKtt18__\"","export default \"__VITE_ASSET__tHCUX_oq__\"","export default \"__VITE_ASSET__cy_itHIy__\"","export default \"__VITE_ASSET__qmMk9TlB__\"","export default \"__VITE_ASSET__ab6FJxvi__\"","export default \"__VITE_ASSET__DJtOjbCL__\"","import {\n\thexaflake,\n\thexnut,\n\thexpool,\n\tpentaflake,\n\tsierpinskiCarpet,\n\tsierpinskiHexagon,\n\tsierpinskiPentagon,\n\tsierpinskiTriangle,\n\ttSquare,\n} from \"@/assets/Thumbnails/fill\";\nimport { FillFractalInfo, Point } from \"@/types\";\nimport { add, rotate } from \"../utils\";\n\nfunction genCentersV(centers: Point[], sides: number, i_rad: number, shift = 0) {\n\tconst newCenters = [];\n\tfor (const center of centers) {\n\t\tlet dir = rotate([0, -i_rad], shift);\n\t\tfor (let j = 0; j < sides; j++) {\n\t\t\tnewCenters.push(add(center, dir));\n\t\t\tdir = rotate(dir, (2 * Math.PI) / sides);\n\t\t}\n\t}\n\treturn newCenters;\n}\n\nfunction genCentersVC(centers: Point[], invCenters: Point[], sides: number, i_rad: number, shift = 0): [Point[], Point[]] {\n\tconst newCenters = [];\n\tconst newInvCenters = [];\n\tfor (const center of centers) {\n\t\tnewInvCenters.push(center);\n\t\tlet dir = rotate([0, -i_rad], shift);\n\t\tfor (let j = 0; j < sides; j++) {\n\t\t\tnewCenters.push(add(center, dir));\n\t\t\tdir = rotate(dir, (2 * Math.PI) / sides);\n\t\t}\n\t}\n\tfor (const invCenter of invCenters) {\n\t\tnewCenters.push(invCenter);\n\t\tlet dir = rotate([0, i_rad], shift);\n\t\tfor (let j = 0; j < sides; j++) {\n\t\t\tnewInvCenters.push(add(invCenter, dir));\n\t\t\tdir = rotate(dir, (2 * Math.PI) / sides);\n\t\t}\n\t}\n\n\treturn [newCenters, newInvCenters];\n}\n\nfunction genCentersVS(centers: Point[], sides: number, i_rad: [number, number]) {\n\tconst newCenters = [];\n\tfor (const center of centers) {\n\t\tlet dir_0 = rotate([0, -i_rad[0]], -Math.PI / sides);\n\t\tlet dir_1 = rotate([0, -i_rad[1]], 0);\n\t\tfor (let j = 0; j < sides; j++) {\n\t\t\tnewCenters.push(add(center, dir_0));\n\t\t\tnewCenters.push(add(center, dir_1));\n\t\t\tdir_1 = rotate(dir_1, (2 * Math.PI) / sides);\n\t\t\tdir_0 = rotate(dir_0, (2 * Math.PI) / sides);\n\t\t}\n\t}\n\treturn newCenters;\n}\n\nfunction polyVGen(center: Point, sides: number, o_rad: number, shift = 0) {\n\tconst vertices = [];\n\tlet dir = rotate([0, -o_rad], shift);\n\tfor (let i = 0; i < sides; i++) {\n\t\tvertices.push(add(center, dir));\n\t\tdir = rotate(dir, (2 * Math.PI) / sides);\n\t}\n\treturn vertices;\n}\n\nconst SierpinskiTriangle: FillFractalInfo = {\n\tname: \"Sierpinski Triangle\",\n\timage: sierpinskiTriangle,\n\tmaxDepth: 7,\n\trules: () => {\n\t\tconst sides = 3;\n\t\tconst ratio = 1 / 2;\n\t\tconst o_rad = 900 / Math.sin((2 * Math.PI) / 3);\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, (o_rad * (1 - Math.cos(Math.PI / sides))) / 2],\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst newCenters = genCentersV(centers, sides, i_rad);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn [newCenters, invCenters];\n\t\t\t},\n\t\t\tpolyVGen: (d) => (c) => polyVGen(c, sides, o_rad * Math.pow(ratio, d)),\n\t\t};\n\t},\n};\nconst SierpinskiPentagon: FillFractalInfo = {\n\tname: \"Sierpinski Pentagon\",\n\timage: sierpinskiPentagon,\n\tmaxDepth: 5,\n\trules: () => {\n\t\tconst sides = 5;\n\t\tconst ratio = 1 / (1 + 2 * Math.cos(Math.PI / sides));\n\t\tconst o_rad = 900 / Math.sin((2 * Math.PI) / sides);\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, (o_rad * (1 - Math.cos(Math.PI / sides))) / 2],\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst newCenters = genCentersV(centers, sides, i_rad);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn [newCenters, invCenters];\n\t\t\t},\n\t\t\tpolyVGen: (d) => (c) => polyVGen(c, sides, o_rad * Math.pow(ratio, d)),\n\t\t};\n\t},\n};\nconst SierpinskiHexagon: FillFractalInfo = {\n\tname: \"Sierpinski Hexagon\",\n\timage: sierpinskiHexagon,\n\tmaxDepth: 5,\n\trules: () => {\n\t\tconst sides = 6;\n\t\tconst ratio = 1 / 3;\n\t\tconst o_rad = 900;\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, 0],\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst newCenters = genCentersV(centers, sides, i_rad);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn [newCenters, invCenters];\n\t\t\t},\n\t\t\tpolyVGen: (d) => (c) => polyVGen(c, sides, o_rad * Math.pow(ratio, d)),\n\t\t};\n\t},\n};\nconst PentaFlake: FillFractalInfo = {\n\tname: \"Pentaflake\",\n\timage: pentaflake,\n\tmaxDepth: 5,\n\trules: () => {\n\t\tconst sides = 5;\n\t\tconst ratio = 1 / (1 + 2 * Math.cos(Math.PI / sides));\n\t\tconst o_rad = 900 / Math.sin((2 * Math.PI) / sides);\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, (o_rad * (1 - Math.cos(Math.PI / sides))) / 2],\n\t\t\trules: (centers: Point[], invCenters: Point[]) => {\n\t\t\t\tconst allCenters = genCentersVC(centers, invCenters, sides, i_rad);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn allCenters;\n\t\t\t},\n\t\t\tpolyVGen: (d, flip) => (c: Point) => polyVGen(c, sides, o_rad * Math.pow(ratio, d), flip ? Math.PI : 0),\n\t\t};\n\t},\n};\nconst HexaFlake: FillFractalInfo = {\n\tname: \"Hexaflake\",\n\timage: hexaflake,\n\tmaxDepth: 5,\n\trules: () => {\n\t\tconst sides = 6;\n\t\tconst ratio = 1 / 3;\n\t\tconst o_rad = 900;\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, (o_rad * (1 - Math.cos(Math.PI / sides))) / 2],\n\t\t\trules: (centers: Point[], invCenters: Point[]) => {\n\t\t\t\tconst allCenters = genCentersVC(centers, invCenters, sides, i_rad);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn allCenters;\n\t\t\t},\n\t\t\tpolyVGen: (d, flip) => (c: Point) => polyVGen(c, sides, o_rad * Math.pow(ratio, d), flip ? Math.PI : 0),\n\t\t};\n\t},\n};\nconst HexNut: FillFractalInfo = {\n\tname: \"Hex Nut\",\n\tmaxDepth: 5,\n\timage: hexnut,\n\trules: () => {\n\t\tconst sides = 6;\n\t\tconst ratio = 1 / 3;\n\t\tconst o_rad = 900;\n\t\tlet i_rad = o_rad * (1 - ratio) * Math.cos(Math.PI / 6);\n\t\treturn {\n\t\t\torigin: [0, 0],\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst newCenters = genCentersV(centers, sides, i_rad, Math.PI / 6);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn [newCenters, invCenters];\n\t\t\t},\n\t\t\tpolyVGen: (d, flip) => (c: Point) => polyVGen(c, sides, o_rad * Math.pow(ratio, d), flip ? Math.PI : 0),\n\t\t};\n\t},\n};\n\nconst HexPool: FillFractalInfo = {\n\tname: \"Hex Pool\",\n\tmaxDepth: 5,\n\timage: hexpool,\n\trules: () => {\n\t\tconst sides = 6;\n\t\tconst ratio = 1 / 3;\n\t\tconst o_rad = 900;\n\t\tlet i_rad = o_rad * (1 - ratio) * Math.cos(Math.PI / 6);\n\t\treturn {\n\t\t\torigin: [0, 0],\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst allcenters = genCentersVC(centers, invCenters, sides, i_rad, Math.PI / 6);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn allcenters;\n\t\t\t},\n\t\t\tpolyVGen: (d, flip) => (c: Point) => polyVGen(c, sides, o_rad * Math.pow(ratio, d), flip ? Math.PI : 0),\n\t\t};\n\t},\n};\n\nconst SierpinskiCarpet: FillFractalInfo = {\n\tname: \"Sierpinski Carpet\",\n\tmaxDepth: 5,\n\timage: sierpinskiCarpet,\n\trules: () => {\n\t\tconst o_rad = 900 * Math.sqrt(2);\n\t\tconst ratio = 1 / 3;\n\t\tconst sides = 4;\n\t\tlet i_rad: [number, number] = [o_rad * (1 - ratio), (o_rad * (1 - ratio)) / Math.sqrt(2)];\n\t\treturn {\n\t\t\torigin: [0, 0],\n\t\t\tpolyVGen: (d) => (c) => polyVGen(c, 4, o_rad * Math.pow(ratio, d), Math.PI / 4),\n\t\t\trules: (centers, invCenters) => {\n\t\t\t\tconst newCenters = genCentersVS(centers, sides, i_rad);\n\t\t\t\ti_rad[0] *= ratio;\n\t\t\t\ti_rad[1] *= ratio;\n\t\t\t\treturn [newCenters, invCenters];\n\t\t\t},\n\t\t};\n\t},\n};\n\nconst TSquare: FillFractalInfo = {\n\tname: \"T Square\",\n\tmaxDepth: 6,\n\timage: tSquare,\n\trules: () => {\n\t\tconst o_rad = 900 * Math.sqrt(2);\n\t\tconst ratio = 1 / 3;\n\t\tconst sides = 4;\n\t\tlet i_rad = o_rad * (1 - ratio);\n\t\treturn {\n\t\t\torigin: [0, 0],\n\t\t\tpolyVGen: (d) => (c) => polyVGen(c, 4, o_rad * Math.pow(ratio, d), Math.PI / 4),\n\t\t\trules: (centers, invCenter) => {\n\t\t\t\tconst allCenters = genCentersVC(centers, invCenter, sides, i_rad, Math.PI / 4);\n\t\t\t\ti_rad *= ratio;\n\t\t\t\treturn allCenters;\n\t\t\t},\n\t\t};\n\t},\n};\n\nconst FillFractalRuleSet: Record<string, FillFractalInfo> = {\n\t\"sierpinski-triangle\": SierpinskiTriangle,\n\t\"sierpinski-pentagon\": SierpinskiPentagon,\n\t\"sierpinski-hexagon\": SierpinskiHexagon,\n\t\"penta-flake\": PentaFlake,\n\t\"hexa-flake\": HexaFlake,\n\t\"hex-nut\": HexNut,\n\t\"hex-pool\": HexPool,\n\t\"sierpinski-carpet\": SierpinskiCarpet,\n\t\"t-square\": TSquare,\n};\n\nexport default FillFractalRuleSet;\n"],"names":["sierpinskiTriangle","sierpinskiPentagon","sierpinskiHexagon","pentaflake","hexaflake","hexnut","hexpool","sierpinskiCarpet","tSquare","genCentersV","centers","sides","i_rad","shift","newCenters","center","dir","rotate","j","add","genCentersVC","invCenters","newInvCenters","invCenter","genCentersVS","dir_0","dir_1","polyVGen","o_rad","vertices","i","SierpinskiTriangle","d","c","SierpinskiPentagon","ratio","SierpinskiHexagon","PentaFlake","allCenters","flip","HexaFlake","HexNut","HexPool","allcenters","SierpinskiCarpet","TSquare","FillFractalRuleSet"],"mappings":"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"}